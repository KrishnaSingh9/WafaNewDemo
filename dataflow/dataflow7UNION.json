{
	"name": "dataflow7UNION",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "DelimitedText4",
						"type": "DatasetReference"
					},
					"name": "ITemployee"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText5",
						"type": "DatasetReference"
					},
					"name": "HRemployee"
				},
				{
					"dataset": {
						"referenceName": "DelimitedText6",
						"type": "DatasetReference"
					},
					"name": "PayrollEmployee"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "DelimitedText7",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "union1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          empid as string,",
				"          name as string,",
				"          country as string,",
				"          depid as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> ITemployee",
				"source(output(",
				"          empid as string,",
				"          name as string,",
				"          country as string,",
				"          depid as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> HRemployee",
				"source(output(",
				"          empid as string,",
				"          name as string,",
				"          country as string,",
				"          depid as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> PayrollEmployee",
				"ITemployee, HRemployee, PayrollEmployee union(byName: true)~> union1",
				"union1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          empid as string,",
				"          name as string,",
				"          country as string,",
				"          depid as string",
				"     ),",
				"     partitionFileNames:['ALLEMPLOYEE_DATA'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> sink1"
			]
		}
	}
}